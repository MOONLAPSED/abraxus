[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "abraxus"
description = "abraxus, part of the cognosis project"
authors = [{ name = "MOONLAPSED", email = "MOONLAPSED@gmail.com" }]
version = "0.1.2"
requires-python = ">= 3.11"

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.api.readme]
file = "docs/api/README.md"
content-type = "text/markdown"

[project.optional-dependencies]
dev = [
    "pytest", 
    "mypy", 
    "pytest-cov", 
    "black", 
    "flake8", 
    "pdm-pep517", 
    "pdm-pep517-build-backend", 
    "isort", 
    "tox", 
    "pre-commit", 
    "cffi", 
    "cmake", 
    "ctags", 
    "pdm",
    "mamba",
    "micromamba",
    "pytest-benchmark", 
    "hypothesis",
]

[tool.pdm.conda]
runner = "micromamba"
channels = ["conda-forge/noarch", "conda-forge", "anaconda"]
dependencies = ["pdm", "jax", "openai", "pydantic", "httpx"]
as-default-manager = true
solver = "libmamba"
excludes = ["pytest-cov"]  # don't install with conda even if it's a dependency from other packages
installation-method = "copy"
batched-commands = true

[tool.pdm.conda.pypi-mapping]
download-dir = "/tmp"
url = "https://url/to/mapping.yaml"

[tool.pdm.conda.optional-dependencies]
extra = [
    "anaconda:ffmpeg",
    "anaconda::xonsh",
    "anaconda::pdm",
    "anaconda::jupyter",
    "anaconda::ipykernel",
    "anaconda::numpy",
    "anaconda::mypy",
    "anaconda::ipykernel",
    "anaconda::xonsh",
]

[tool.pdm.conda.dev-dependencies]
dev = [
    "pytest",
    "mypy",
    "pytest-cov",
    "black",
    "flake8",
    "pdm-pep517",
    "pdm-pep517-build-backend",
    "isort",
    "tox",
    "pre-commit",
    "cffi",
    "gcc",
    "cmake",
    "ctags",
    "pytest",
    "pytest-benchmark",
    "hypothesis",
]

[tool.black]
line-length = 88

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
testpaths = ["tests"]

[project.scripts]
main = "main:main"  # Ensure the actual main function matches the entry point
bench = "src.bench.bench:main"  # Ensure the actual benchmark function matches the entry point

[build]
root-dir = "."